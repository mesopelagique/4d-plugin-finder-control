/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Finder-Control.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Finder Control
 #	author : miyako
 #	2020/09/03
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Finder-Control.h"

#ifndef errAEEventWouldRequireUserConsent
enum {
    errAEEventWouldRequireUserConsent     =     -1744
};
#endif

void requestPermission(NSString *bundleIdentifier) {
    
    if (@available(macOS 10.14, *)) {
        OSStatus status;
        
        /*
         alternatively
         NSAppleEventDescriptor *targetAppEventDescriptor;
         targetAppEventDescriptor = [NSAppleEventDescriptor descriptorWithBundleIdentifier:@"com.apple.Notes"];
         and pass targetAppEventDescriptor.aeDesc to AEDeterminePermissionToAutomateTarget()
         */
        
        AEAddressDesc addressDesc;
        
        const char *bundleIdentifierCString = [bundleIdentifier cStringUsingEncoding:NSUTF8StringEncoding];
        if(AECreateDesc(typeApplicationBundleID, bundleIdentifierCString, strlen(bundleIdentifierCString), &addressDesc) == noErr)
        {
            status = AEDeterminePermissionToAutomateTarget(&addressDesc, typeWildCard, typeWildCard, true);
            AEDisposeDesc(&addressDesc);
            
            switch (status) {
                case errAEEventWouldRequireUserConsent:
                    NSLog(@"Automation permission pending for %@", bundleIdentifier);
                    break;
                case noErr:
                    NSLog(@"Automation permission granted for %@", bundleIdentifier);
                    break;
                case errAEEventNotPermitted:
                    NSLog(@"Automation permission denied for %@", bundleIdentifier);
                    break;
                case procNotFound:
                    NSLog(@"Automation permission unknown for %@", bundleIdentifier);
                    break;
                default:
                    break;
            }
        }
    }
}

void OnStartup()
{
    requestPermission(@"com.apple.Finder");
}

#pragma mark -

FinderItem *getFinderItem(C_TEXT &path) {
    
    FinderItem *item = nil;
    
    FinderApplication *application = [SBApplication applicationWithBundleIdentifier:@"com.apple.Finder"];
    
    if(application){
    
        NSURL *url = path.copyUrl();
        SBElementArray *items = [application items];
        item = [items objectAtLocation:url];
        [url release];
    }
    
    return item;
}

NSInteger sortWithOption(id string1, id string2, void *context)
{
    static NSStringCompareOptions options =
    NSCaseInsensitiveSearch | NSNumericSearch |
    NSWidthInsensitiveSearch | NSForcedOrderingSearch;
    
    NSLocale *locale = (NSLocale *)context;
    
    NSRange string1Range = NSMakeRange(0, [string1 length]);
    
    return [string1 compare:string2
                    options:options
                      range:string1Range
                     locale:locale];
}

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
            case kInitPlugin :
            case kServerInitPlugin :
                OnStartup();
                break;
                
			// --- Finder Control
            
			case 1 :
				Finder_set_comment(params);
				break;
			case 2 :
				Finder_get_comment(params);
				break;
			case 3 :
				Finder_set_locked(params);
				break;
			case 4 :
				Finder_get_locked(params);
				break;
			case 5 :
				Finder_set_extension_hidden(params);
				break;
			case 6 :
				Finder_get_extension_hidden(params);
				break;
			case 7 :
				Finder_SORT_ARRAY(params);
				break;
			case 8 :
				Finder_get_display_name(params);
				break;
			case 9 :
				Finder_get_description(params);
				break;
			case 10 :
				Finder_get_kind(params);
				break;
			case 11 :
				Finder_reveal(params);
				break;
			case 12 :
				Finder_trash(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void Finder_set_comment(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item) {
        if([item exists]){
            NSString *comment = Param2.copyUTF16String();
            item.comment = comment;
            [comment release];
            returnValue.setIntValue(1);
        }
    }

    returnValue.setReturn(pResult);
}

void Finder_get_comment(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item) {
        if([item exists]){
            Param2.setUTF16String(item.comment);
            returnValue.setIntValue(1);
        }
    }

    Param2.toParamAtIndex(pParams, 2);
    returnValue.setReturn(pResult);
}

void Finder_set_locked(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_LONGINT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item){
        if([item exists]){
            item.locked = Param2.getIntValue();
            returnValue.setIntValue(1);
        }
    }
    
    returnValue.setReturn(pResult);
}

void Finder_get_locked(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_LONGINT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item){
        if([item exists]){
            Param2.setIntValue(item.locked);
            returnValue.setIntValue(1);
        }
    }

    Param2.toParamAtIndex(pParams, 2);
    returnValue.setReturn(pResult);
}

void Finder_set_extension_hidden(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_LONGINT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item){
        if([item exists]){
            item.extensionHidden = Param2.getIntValue();
            returnValue.setIntValue(1);
        }
    }

    returnValue.setReturn(pResult);
}

void Finder_get_extension_hidden(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_LONGINT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item){
        if([item exists]){
            Param2.setIntValue(item.extensionHidden);
            returnValue.setIntValue(1);
        }
    }

    Param2.toParamAtIndex(pParams, 2);
    returnValue.setReturn(pResult);
}

void Finder_SORT_ARRAY(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    ARRAY_TEXT Param1;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    uint32_t i, length = Param1.getSize();
    NSMutableArray *stringsArray = [[NSMutableArray alloc]initWithCapacity:length];
    NSString *_string;
    
    for(i = 0; i < length; ++i){
        _string = Param1.copyUTF16StringAtIndex(i);
        [stringsArray insertObject:_string atIndex:i];
        [_string release];
    }
    
    NSArray *sortedArray = [stringsArray sortedArrayUsingFunction:sortWithOption context:[NSLocale currentLocale]];
    
    for(i = 0; i < length; ++i){
        Param1.setUTF16StringAtIndex([sortedArray objectAtIndex:i], i);
    }
    
    Param1.toParamAtIndex(pParams, 1);
}

void Finder_get_display_name(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item){
        if([item exists]){
            Param2.setUTF16String(item.displayedName);
            returnValue.setIntValue(1);
        }
    }

    Param2.toParamAtIndex(pParams, 2);
    returnValue.setReturn(pResult);
}

void Finder_get_description(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item){
        if([item exists]){
            Param2.setUTF16String(item.objectDescription);
            returnValue.setIntValue(1);
        }
    }

    Param2.toParamAtIndex(pParams, 2);
    returnValue.setReturn(pResult);
}

void Finder_get_kind(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item){
        if([item exists]){
            Param2.setUTF16String(item.kind);
            returnValue.setIntValue(1);
        }
    }
    
    Param2.toParamAtIndex(pParams, 2);
    returnValue.setReturn(pResult);
}

void Finder_reveal(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item){
        if([item exists]){
            [item reveal];
            returnValue.setIntValue(1);
        }
    }

    returnValue.setReturn(pResult);
}

void Finder_trash(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;

    C_TEXT Param1;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    FinderItem *item = getFinderItem(Param1);
    
    if(item){
        if([item exists]){
            [item delete];
            returnValue.setIntValue(1);
        }
    }

    returnValue.setReturn(pResult);
}
